"""
Map Search
"""

import comp140_module7 as maps

class Queue:
    """
    A simple implementation of a FIFO queue.
    """

    def __init__(self):
        """
        Initialize the queue.
        """
        self._queue=[]

    def __len__(self):
        """
        Returns: an integer representing the number of items in the queue.
        """
        return len(self._queue)

    def __str__(self):
        """
        Returns: a string representation of the queue.
        """
        return str(self._queue)

    def push(self, item):
        """
        Add item to the queue.

        input:
            - item: any data type that's valid in a list
        """
        self._queue.append(item)

    def pop(self):
        """
        Remove the least recently added item.

        Assumes that there is at least one element in the queue.  It
        is an error if there is not.  You do not need to check for
        this condition.

        Returns: the least recently added item.
        """
        item = self._queue.pop(0)
        return item

    def clear(self):
        """
        Remove all items from the queue.
        """
        count = 0
        while count < len(self._queue):
            self._queue.pop(0)
     



class Stack:
    """
    A simple implementation of a LIFO stack.
    """

    def __init__(self):
        """
        Initialize the stack.
        """
        self._stack=[]

    def __len__(self):
        """
        Returns: an integer representing the number of items in the stack.
        """
        return len(self._stack)

    def __str__(self):
        """
        Returns: a string representation of the stack.
        """
        return str(self._stack)

    def push(self, item):
        """
        Add item to the stack.

        input:
            - item: any data type that's valid in a list
        """
        self._stack.append(item)

    def pop(self):
        """
        Remove the most recently added item.

        Assumes that there is at least one element in the stack.  It
        is an error if there is not.  You do not need to check for
        this condition.

        Returns: the most recently added item.
        """
        item = self._stack.pop(-1)
        return item

    def clear(self):
        """
        Remove all items from the stack.
        """
        count = 0
        while count < len(self._stack):
            self._stack.pop(0)


def bfs_dfs(graph, rac_class, start_node, end_node):
    """
    Performs a breadth-first search or a depth-first search on graph
    starting at the start_node.  The rac_class should either be a
    Queue class or a Stack class to select BFS or DFS.

    Completes when end_node is found or entire graph has been
    searched.

    inputs:
        - graph: a directed Graph object representing a street map
        - rac_class: a restricted access container (Queue or Stack) class to
          use for the search
        - start_node: a node in graph representing the start
        - end_node: a node in graph representing the end

    Returns: a dictionary associating each visited node with its parent
    node.
    """
    if rac_class==Queue:
        queue=Queue()
        dist={}
        parent={}
        #create iterable with graph api .nodes
        for each in graph.nodes():
            #give each node a default value
            dist[each]=float("inf")
            parent[each]=None
        #initial
        dist[start_node]=0
        parent[start_node]= None
        #pushes the node into the queue
        queue.push(start_node)
        #iterates till queue is empty
        while len(queue) != 0:
            #pops current queue
            node = queue.pop()
            #using graph api we get all the neighbors and 
            #find distances
            
            for nbr in graph.get_neighbors(node):
                if dist[nbr]==float("inf"):
                    dist[nbr]=dist[node]+1
                    parent[nbr]=node
                    #pushes neighbors onto queue in order to check
                    queue.push(nbr)
                if nbr==end_node:
                    return parent
                 
        return parent
    else:
        stack=Stack()
        dist={}
        parent={}
        #create iterable with graph api .nodes
        for each in graph.nodes():
            #give each node a default value
            dist[each]=float("inf")
            parent[each]=None
        #initial
        dist[start_node]=0
        parent[start_node]= None
        #pushes the node into the stack
        stack.push(start_node)
        #iterates till stack is empty
        while len(stack) != 0:
            #pops current queue
            node = stack.pop()
            #using graph api we get all the neighbors and 
            #find distances           
            if node == end_node:
                return parent
            for nbr in graph.get_neighbors(node):
                if dist[nbr]==float("inf"):
                    dist[nbr]=dist[node]+1
                    parent[nbr]=node
                    #pushes neighbors onto stack in order to check
                    stack.push(nbr)    
        return parent
    

def dfs(graph, start_node, end_node, parent):
    """
    Performs a recursive depth-first search on graph starting at the
    start_node.

    Completes when end_node is found or entire graph has been
    searched.

    inputs:
        - graph: a directed Graph object representing a street map
        - start_node: a node in graph representing the start
        - end_node: a node in graph representing the end
        - parent: a dictionary that initially has one entry associating
                  the original start_node with None

    Modifies the input parent dictionary to associate each visited node
    with its parent node
    """
    if start_node == end_node:
        return parent
    else: 
        for nbr in graph.get_neighbors(start_node):
            if nbr not in parent:
                parent[nbr] = start_node
                dfs(graph,nbr,end_node,parent)
        return parent    
 
    


def astar(graph, start_node, end_node,
          edge_distance, straight_line_distance):
    """
    Performs an A* search on graph starting at start_node.

    Completes when end_node is found or entire graph has been
    searched.

    inputs:
        - graph: a directed Graph object representing a street map
        - start_node: a node in graph representing the start
        - end_node: a node in graph representing the end
        - edge_distance: a function which takes two nodes and a graph
                         and returns the actual distance between two
                         neighboring nodes
        - straight_line_distance: a function which takes two nodes and
                         a graph and returns the straight line distance 
                         between two nodes

    Returns: a dictionary associating each visited node with its parent
    node.
    """
    
    
    
    
    start_g=0
    start_h=straight_line_distance(start_node,end_node,graph)
    openset={}
    #add the start node to openset 
    openset[start_node]=(start_g,start_h)
    closedset={}
    parent={}
    
    
    #initialize all nodes as None until found or if isolated
    for each in graph.nodes():
        parent[each]=None
    
    
    #iterate until openset is empty(whole graph is found)
    while len(openset)!=0:
        #finds the min f cost by computing all the f costs
        #in open set and returning the minimum
        current_node=min(openset,key=openset.get)
            
        
        print(current_node)
        for nbr in graph.get_neighbors(current_node):
            
            #distance between each neighbor and current node
            distance = openset[current_node][0]+ edge_distance(current_node, nbr, graph)
          
            #check if already visited
            if nbr in closedset:
                continue
            #checks if nbr is in openset whether or not to
            #update the cost
            if nbr in openset:
                if openset[nbr][0]>distance:
                    openset[nbr]=(distance,
                                  straight_line_distance(nbr,end_node,graph))
                    parent[nbr]=current_node
            #adds node to openset if new node
            else:
                openset[nbr]=(distance,straight_line_distance(nbr,end_node,graph))
                parent[nbr]=current_node
        closedset[current_node]=openset[current_node]
        #print(openset)
        #print(closedset)
        openset.pop(current_node)
    return parent
             
        
            
            
 





maps.start(bfs_dfs, Queue, Stack, dfs, astar)
